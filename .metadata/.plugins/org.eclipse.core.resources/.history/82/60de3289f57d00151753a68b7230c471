package com.dao;

import java.util.List;

import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Example;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.domain.Businesstree;

/**
 * A data access object (DAO) providing persistence and search support for
 * Businesstree entities. Transaction control of the save(), update() and
 * delete() operations can directly support Spring container-managed
 * transactions or they can be augmented to handle user-managed Spring
 * transactions. Each of these methods provides additional information for how
 * to configure it for the desired type of transaction control.
 * 
 * @see com.domain.Businesstree
 * @author MyEclipse Persistence Tools
 */

public class BusinesstreeDAO extends BaseHibernateDAO {
	private static final Logger log = LoggerFactory
			.getLogger(BusinesstreeDAO.class);
	// property constants
	public static final String PARENT_ID = "parentId";
	public static final String NAME = "name";
private 	Transaction tx = getSession().beginTransaction();
	public void save(Businesstree transientInstance) {
		log.debug("saving Businesstree instance");
	
		Session sess= getSession();
		Transaction tx = sess.beginTransaction();
		try {
			sess.save(transientInstance);
			log.debug("save successful");
			tx.commit();
			System.out.println("--操作结果:新增分类成功");
		} catch (RuntimeException re) {
			System.out.println("--操作结果:新增分类失败");
			log.error("save failed", re);
			throw re;
		}finally{
			sess.clear();
			sess.flush();
			sess.close();
		}
	}

	public void delete(Businesstree persistentInstance) {
//		Transaction tx = getSession().beginTransaction();
		Session sess= getSession();
		Transaction tx = sess.beginTransaction();
		log.debug("deleting Businesstree instance");
		try {
			sess.delete(persistentInstance);
			log.debug("delete successful");
			tx.commit();
			System.out.println("--操作结果:删除分类成功");
		} catch (RuntimeException re) {
			System.out.println("--操作结果:删除分类失败");
			log.error("delete failed", re);
			throw re;
		}finally{
			sess.clear();
			sess.flush();
			sess.close();
		}
	}

	public Businesstree findById(java.lang.Integer id) {
		log.debug("getting Businesstree instance with id: " + id);
		try {
			Businesstree instance = (Businesstree) getSession().get(
					"com.domain.Businesstree", id);
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List findByExample(Businesstree instance) {
		log.debug("finding Businesstree instance by example");
		try {
			List results = getSession()
					.createCriteria("com.domain.Businesstree")
					.add(Example.create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	public List findByProperty(String propertyName, Object value) {
		log.debug("finding Businesstree instance with property: "
				+ propertyName + ", value: " + value);
		try {
			String queryString = "from Businesstree as model where model."
					+ propertyName + "= ?";
			Query queryObject = getSession().createQuery(queryString);
			queryObject.setParameter(0, value);
			return queryObject.list();
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}

	public List findByParentId(Object parentId) {
		return findByProperty(PARENT_ID, parentId);
	}

	public List findByName(Object name) {
		return findByProperty(NAME, name);
	}

	public List findAll() {
		Session sess= getSession();
		Transaction tx = sess.beginTransaction();
		log.debug("finding all Businesstree instances");
		try {
			String queryString = "from Businesstree";
			Query queryObject = sess.createQuery(queryString);
			tx.commit();
//			System.out.println("--操作结果:查询树形目录成功");
			return queryObject.list();
		} catch (RuntimeException re) {
//			System.out.println("--操作结果:查询树形目录失败");
			log.error("find all failed", re);
			throw re;
		}finally{
			sess.clear();
			sess.flush();
			sess.close();
		}
	}

	public Businesstree merge(Businesstree detachedInstance) {
		log.debug("merging Businesstree instance");
		try {
			Businesstree result = (Businesstree) getSession().merge(
					detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public void attachDirty(Businesstree instance) {
		log.debug("attaching dirty Businesstree instance");
		try {
			getSession().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(Businesstree instance) {
		log.debug("attaching clean Businesstree instance");
		try {
			getSession().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}
}