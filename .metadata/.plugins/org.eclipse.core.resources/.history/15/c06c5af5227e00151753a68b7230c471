package com.dao;

import java.util.List;

import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Example;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.domain.Business;

/**
 * A data access object (DAO) providing persistence and search support for
 * Business entities. Transaction control of the save(), update() and delete()
 * operations can directly support Spring container-managed transactions or they
 * can be augmented to handle user-managed Spring transactions. Each of these
 * methods provides additional information for how to configure it for the
 * desired type of transaction control.
 * 
 * @see com.domain.Business
 * @author MyEclipse Persistence Tools
 */

public class BusinessDAO extends BaseHibernateDAO {
	private static final Logger log = LoggerFactory
			.getLogger(BusinessDAO.class);
	// property constants
	public static final String TITLE = "title";
	public static final String PARENT_ID = "parentId";
	
	private Transaction tx = getSession().beginTransaction();
	public void save(Business transientInstance) {
		Session sess= getSession();
		Transaction tx = sess.beginTransaction();
//		System.out.println(transientInstance.getTitle()+"  "+transientInstance.getParentId());
		log.debug("saving Business instance");
		try {
//			System.out.println("1");
			sess.save(transientInstance);
//			System.out.println("2");
			tx.commit();
			System.out.println("--操作结果:新增业务成功");
//			System.out.print("BusinessDAO.save() is called");
			log.debug("save successful");
			
		} catch (RuntimeException re) {
			System.out.println("--操作结果:新增业务失败");
			log.error("save failed", re);
			throw re;
		}finally{
//			System.out.println("3");
			sess.clear();
			sess.flush();
			sess.close();
		}
	}

	public void delete(Business persistentInstance) {
		log.debug("deleting Business instance");
		Session sess= getSession();
		Transaction tx = sess.beginTransaction();
		try {
			sess.delete(persistentInstance);
			tx.commit();
			System.out.println("--操作结果:删除业务成功");
			log.debug("delete successful");
		} catch (RuntimeException re) {
			
			System.out.println("--操作结果:删除业务失败");
			log.error("delete failed", re);
			throw re;
		}finally{
//			System.out.println("3");
			sess.clear();
			sess.flush();
			sess.close();
		}
	}

	public Business findById(java.lang.Integer id) {
		log.debug("getting Business instance with id: " + id);
		try {
			Business instance = (Business) getSession().get(
					"com.domain.Business", id);
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List findByExample(Business instance) {
		log.debug("finding Business instance by example");
		try {
			List results = getSession().createCriteria("com.domain.Business")
					.add(Example.create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	public List findByProperty(String propertyName, Object value) {
		Session sess= getSession();
		Transaction tx = sess.beginTransaction();
		log.debug("finding Business instance with property: " + propertyName
				+ ", value: " + value);
//		System.out.println("--BusinessDAO.findByProperty() is called");
//		Transaction tx=getSession().beginTransaction();
		List list ;
		try {
//			System.out.println(propertyName+"   "+value);
//			System.out.println("1");
			String queryString = "from Business as model where model."
					+ propertyName + "= ?";
//			System.out.println("2");
			Query queryObject = sess.createQuery(queryString);
//			System.out.println("3");
			queryObject.setParameter(0, value);
//			System.out.println("4");
			list = queryObject.list();
			return list;
		} catch (RuntimeException re) {
			System.out.print("--操作结果:查询失败");
			log.error("find by property name failed", re);
//			re.printStackTrace();
			throw re;
		}finally{
//			System.out.println("3");
			sess.clear();
			sess.flush();
			sess.close();
		}
	}

	public List findByTitle(Object title) {
		return findByProperty(TITLE, title);
	}

	public List findByParentId(Integer parentId) {
//		System.out.println("--BusinessDAO.findByParentId() is called");
//		Transaction tx=getSession().beginTransaction();
//		Query q = getSession().createQuery("select b from Business b where b.parentId=:pid");
//		
////		List list = getSession().createQuery("select b from Business b where b.parentId=:pid").setString("pid", parentId.toString()).list();
//		tx.commit();
//		getSession().close();
//		return list;
//		Query q = getSession().createQuery("select b from Business b where b.parentId=:pid");
//		q.setString("pid", parentId.toString());
//		return q.list();
		return findByProperty(PARENT_ID, parentId);
	}

	public List findAll() {
		System.out.println("1");
		log.debug("finding all Business instances");
		try {
			String queryString = "from Business";
			System.out.println("2");
			Query queryObject = getSession().createQuery(queryString);
			System.out.println("3");
			return queryObject.list();
		} catch (RuntimeException re) {
			System.out.println("4");
			log.error("find all failed", re);
			throw re;
		}
	}

	public Business merge(Business detachedInstance) {
		log.debug("merging Business instance");
		try {
			Business result = (Business) getSession().merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public void attachDirty(Business instance) {
		log.debug("attaching dirty Business instance");
		try {
			getSession().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(Business instance) {
		log.debug("attaching clean Business instance");
		try {
			getSession().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}
}