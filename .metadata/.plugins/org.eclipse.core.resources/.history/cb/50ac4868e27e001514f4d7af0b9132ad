package com.dao;

import java.util.List;

import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Example;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.domain.Businessdetails;

/**
 	* A data access object (DAO) providing persistence and search support for Businessdetails entities.
 			* Transaction control of the save(), update() and delete() operations 
		can directly support Spring container-managed transactions or they can be augmented	to handle user-managed Spring transactions. 
		Each of these methods provides additional information for how to configure it for the desired type of transaction control. 	
	 * @see com.domain.Businessdetails
  * @author MyEclipse Persistence Tools 
 */

public class BusinessdetailsDAO extends BaseHibernateDAO  {
	     private static final Logger log = LoggerFactory.getLogger(BusinessdetailsDAO.class);
		//property constants
	public static final String ELEMENT_ID = "elementId";
	public static final String ELEMENT = "element";
	public static final String DES = "des";
	public static final String BUSINESS_ID = "businessId";

	
    
    public void save(Businessdetails transientInstance) {
        log.debug("saving Businessdetails instance");
//        System.out.println("BusinessdetailsDAO.save() is called");
        Session sess= getSession();
		Transaction tx = sess.beginTransaction();
        try {
//        	Transaction tx = getSession().beginTransaction();

//        	System.out.println("1");
        	sess.save(transientInstance);
//            System.out.println("2");
            tx.commit();
            System.out.println("--操作结果:新增业务明细成功");
//            System.out.println("3");
            log.debug("save successful");
        } catch (RuntimeException re) {
        	System.out.println("--操作结果:新增业务明细失败");
//        	System.out.println("exception");
        	System.out.println(re.fillInStackTrace());
            log.error("save failed", re);
            throw re;
        }finally{
//        	System.out.println("4");
        	sess.clear();
			sess.flush();
			sess.close();
        }
    }
    public void del_detail_byBizId(Integer bid){
    	 Session sess= getSession();
 		Transaction tx = sess.beginTransaction();
    	
    	try {
    		/*String sql = "delete from businessdetails where BusinessId=?";
    		SQLQuery q = sess.createSQLQuery(sql);
    		q.setParameter(0, bid);
    		System.out.println("bid:  "+bid);
    		q.executeUpdate();*/
    		
    		List<Businessdetails> detailList = this.findByBusinessId(bid);
    		Iterator<Businessdetails> item = detailList.iterator();
    		/*String queryString = "delete Businessdetails where Businessdetails.BusinessId=?";
//            String queryString = "from Businessdetails as model where model." 
//            						+ propertyName + "= ?";
            Query queryObject = sess.createQuery(queryString);
   		 queryObject.setParameter(0, bid);
   		 queryObject.executeUpdate();*/
   		 tx.commit();
   		 System.out.println("--操作结果:删除业务明细成功");
//   		 return queryObject.list();
         } catch (RuntimeException re) {
        	 System.out.println("--操作结果:删除业务明细失败");
        	 System.out.println(re.fillInStackTrace());
            log.error("find by property name failed", re);
            throw re;
         }finally{
//         	System.out.println("4");
         	sess.clear();
 			sess.flush();
 			sess.close();
         }
    	
    	
    }
	public void delete(Businessdetails persistentInstance) {
        log.debug("deleting Businessdetails instance");
        try {
            getSession().delete(persistentInstance);
            log.debug("delete successful");
        } catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public Businessdetails findById( java.lang.Integer id) {
        log.debug("getting Businessdetails instance with id: " + id);
        try {
            Businessdetails instance = (Businessdetails) getSession()
                    .get("com.domain.Businessdetails", id);
            return instance;
        } catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    
    public List findByExample(Businessdetails instance) {
        log.debug("finding Businessdetails instance by example");
        try {
            List results = getSession()
                    .createCriteria("com.domain.Businessdetails")
                    .add(Example.create(instance))
            .list();
            log.debug("find by example successful, result size: " + results.size());
            return results;
        } catch (RuntimeException re) {
            log.error("find by example failed", re);
            throw re;
        }
    }    
    
    public List findByProperty(String propertyName, Object value) {
      log.debug("finding Businessdetails instance with property: " + propertyName
            + ", value: " + value);
      try {
         String queryString = "from Businessdetails as model where model." 
         						+ propertyName + "= ?";
         Query queryObject = getSession().createQuery(queryString);
		 queryObject.setParameter(0, value);
		 return queryObject.list();
      } catch (RuntimeException re) {
         log.error("find by property name failed", re);
         throw re;
      }
	}

	public List findByElementId(Object elementId
	) {
		return findByProperty(ELEMENT_ID, elementId
		);
	}
	
	public List findByElement(Object element
	) {
		return findByProperty(ELEMENT, element
		);
	}
	
	public List findByDes(Object des
	) {
		return findByProperty(DES, des
		);
	}
	
	public List findByBusinessId(Object businessId
	) {
		return findByProperty(BUSINESS_ID, businessId
		);
	}
	

	public List findAll() {
		log.debug("finding all Businessdetails instances");
		try {
			String queryString = "from Businessdetails";
	         Query queryObject = getSession().createQuery(queryString);
			 return queryObject.list();
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}
	
    public Businessdetails merge(Businessdetails detachedInstance) {
        log.debug("merging Businessdetails instance");
        try {
            Businessdetails result = (Businessdetails) getSession()
                    .merge(detachedInstance);
            log.debug("merge successful");
            return result;
        } catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }

    public void attachDirty(Businessdetails instance) {
        log.debug("attaching dirty Businessdetails instance");
        try {
            getSession().saveOrUpdate(instance);
            log.debug("attach successful");
        } catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
    public void attachClean(Businessdetails instance) {
        log.debug("attaching clean Businessdetails instance");
        try {
            getSession().lock(instance, LockMode.NONE);
            log.debug("attach successful");
        } catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
}